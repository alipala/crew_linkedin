# tasks.yaml
search_linkedin_posts:
  description: >
    Search for LinkedIn posts related to topics and queries:
    Topics to research: {topics}

    Search Requirements:
    1. For topic searches (keywords): Find posts directly mentioning these topics
    2. For query searches (sentences/questions): Extract key concepts
    3. Focus on high-engagement posts from the last 3 days
    4. Prioritize detailed analysis and expert insights
    5. Consider contextual relevance for complex queries
  expected_output: >
    A structured dataset containing:
    - Post URLs and content
    - Engagement metrics
    - Topic relevance scores
    - Timestamp information
  agent: linkedin_post_search_agent
  task_kwargs:
    topics: "{topics}"
  input_schema:
    type: object
    properties:
      topics:
        type: array
        items:
          type: string

analyze_engagement:
  description: >
    Evaluate the engagement metrics of LinkedIn posts collected, focusing on reactions, comments, and shares to prioritize topics for further analysis.
  expected_output: >
    An analysis report with ranked topics and detailed engagement breakdowns.
  agent: linkedin_interaction_analyze_agent

generate_ideas:
  description: >
    Use engagement data to brainstorm and recommend the most promising topics for content creation. Collaborate with LLMs to refine suggestions.
  expected_output: >
    A curated list of top-performing topics with creative insights for content strategy.
  agent: brainstorm_agent

conduct_web_search:
  description: >
    Perform a detailed web search to find blogs, articles, and research papers relevant to the chosen topic. Utilize tools like Google Serper and ArXiv.
  expected_output: >
    A structured list of references, categorized by source type, relevance, and reliability.
  agent: web_search_agent

compose_blog_content:
  description: >
    Create and publish a technical blog post based on the web search results to Hashnode:
    1. Create engaging, well-structured content between 800-1000 words
    2. Format with proper markdown
    3. Include code examples where relevant
    4. Break content into clear sections with headers
    5. Add relevant technical details and explanations
    6. Include reference links
    7. Generate and add a cover image
    8. Publish to Hashnode
    9. Return the published URL
  expected_output: >
    Published blog post URL and metadata including:
    - Post URL
    - Title
    - Cover image URL
    - Word count
  agent: blog_agent
  context: [conduct_web_search]

create_post:
  description: >
    Using the published blog post URL and content, create an engaging LinkedIn post that:
    1. Summarizes key insights
    2. Includes the blog post URL
    3. Encourages readers to read the full article
    4. Uses appropriate formatting and spacing
  expected_output: >
    A LinkedIn post in proper format that references and links to the blog post
  agent: post_create_agent
  context: [compose_blog_content]

notify_user:
  description: >
   Send this LinkedIn post for review via Slack using the following format:
            Input format: A dictionary containing 'context' with the post data.
            The post data should include 'title' and 'content' fields."""
    Send the LinkedIn post draft to the user via Slack for review. The notification should include 
    the complete post content and allow for user feedback.
  expected_output: >
   Confirmation of the Slack notification being sent
  agent: notification_agent

publish_post:
  description: >
    Share the approved LinkedIn post on the user's profile with appropriate formatting and timing.
  expected_output: >
    A successfully published LinkedIn post with optimized reach and engagement.

share_linkedin_post:
  description: >
    Share the approved LinkedIn post using the LinkedIn API.
    Ensure professional formatting and proper API integration.
  expected_output: >
    Confirmation of successful post sharing on LinkedIn with post URL
  agent: share_agent
  context:
    - create_post